@page "/Bestellabschluss"

@inject HttpClient Http
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject NavigationManager _navigationManager
<body>
	<div class="container col-lg-5 col-md-9 col-sm-12 d-flex flex-column " id="content">
		<p>Sie haben derzeit <b>@kunde.Treuepunkte Yummy-Punkt(e)</b></p>
		<p class="text">
			Bei einem Mindestbestellwert von 8€ erhalten Sie ein Yummy-Punkt.
			Ab der 10ten Bestellung gibt es einen Rabatt (@rabatt.Prozent%) zu Ihrer nächsten Bestellung.
		</p>

		<div class="img">
			@for (int i = 0; i < 10; i++)
			{
				@*if kunde hat treuepunkte*@
				@if (kunde.Treuepunkte > i)
				{
					<img src="assets/Point-Circle.png ">
				}
				else
				{
					<img src="assets/White-Circle.png ">
				}
			}
			<br>
		</div>
		<p class="text">
			Achtung: Bitte beachten Sie, dass keine online Bezahlung zur Verfügung steht.
			Diese dient nur zur Vorbestellung und muss selbst abgeholt werden.
		</p>
		<p>
			Ihr gesamt bestellter Betrag beträgt: <strong>@summe €</strong>
		</p>
		@*if treuepunkte 10 dann angebot bieten*@
		@if (kunde.Treuepunkte == 10)
		{
			<p class=""><strong>Sie haben 10 Yummy-Punkte erreicht</strong>. Sie können diese jetzt einlösen und erhalten einen Rabatt von <strong>@rabatt.Prozent%</strong>.</p>
			<p><strong>Wollen Sie diese einlösen?</strong> <InputCheckbox @bind-Value="rabattEinloesen" /></p>

			@if (rabattEinloesen == true)
			{
				<p>Betrag beträgt abzüglich des Rabattes: <strong>@Math.Round(summe - (summe * rabatt.Prozent / 100), 2) €</strong></p>
			}

		}
		<div class="button">
			<form id="button1" action="Warenkorb">
				<a href="/shopping_cart" class="btn">Zurück</a>
			</form>
			<form id="button2" action="Confirm">
				<input value="Vorbestellen" class="btn" @onclick="Vorbestellen" />
			</form>
		</div>
	</div>
</body>


@code {
	private List<Kunde> kunden = new List<Kunde>();
	private Kunde kunde = new Kunde();

	private List<Rabatt> rabatte = new List<Rabatt>();
	private Rabatt rabatt = new Rabatt();
	private bool rabattEinloesen;

	public Dictionary<int, int> menuitemIds = new Dictionary<int, int>();

	public List<Bestellungsposition> bestellungspositionen = new List<Bestellungsposition>();
	public int hour;
	public int minute;

	public decimal summe;

	public void Vorbestellen()
	{
		// set rabattEinloesen
		if (rabattEinloesen)
		{
			kunde.Treuepunkte = 0;
			// delete treuepunkte API
			Http.PutAsJsonAsync("https://localhost:7076/api/kunden/" + kunde.Idkunde, kunde);
			summe = Math.Round(summe - (summe * rabatt.Prozent / 100), 2);
			localStorage.SetItem("Summe", summe);
		}
		else
		{
			localStorage.SetItem("RabattEinloesen", false);
		}

		// add bestellung to API
		// add all bestellungspositionen to API
		// get latest bestellungsposition id wenn nix da dann 0
		int bestellungspositionId = 0;
		if (bestellungspositions != null)
		{
			// get the highest id from bestellungspositions
			int highestId;
			foreach (var item in bestellungspositions)
			{
				highestId = item.Idbestellung;
				if (highestId > bestellungspositionId)
				{
					bestellungspositionId = highestId;
				}
			}
		}
		foreach (var item in menuitemIds)
		{
			bestellungspositionId++;
			Bestellungsposition bestellungsposition = new Bestellungsposition();
			bestellungsposition.Idbestellung = bestellungspositionId;
			bestellungsposition.Menge = item.Value;
			// make a new date with hour and minute
			DateTime abholzeit = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, hour, minute, 0);
			bestellungsposition.Datum = abholzeit;
			// latest possible rabatt
			bestellungsposition.RabattIdrabatt = rabatt.Idrabatt;
			bestellungsposition.KundeIdkunde = kunde.Idkunde;

			Http.PostAsJsonAsync("https://localhost:7076/api/bestellungspositionen", bestellungsposition);

			 //Add menuitems to bestellungspositionHasMenuItem
			BestellungspositionHasMenuitem bestellungspositionHasMenuItem = new BestellungspositionHasMenuitem();
			bestellungspositionHasMenuItem.Bestellungsposition_IDBestellung = bestellungsposition.Idbestellung;
			bestellungspositionHasMenuItem.MenuItem_IDMenuItem = item.Key;

			Http.PostAsJsonAsync("https://localhost:7076/api/bestellungspositionhasmenuitems", bestellungspositionHasMenuItem);
		}

		// delete all localStorage
		localStorage.SetItem("MenuItemIds", new Dictionary<int, int>());
		localStorage.SetItem("Hour", 0);
		localStorage.SetItem("Minute", 0);
		localStorage.SetItem("Summe", 0);
		localStorage.SetItem("RabattEinloesen", false);

		_navigationManager.NavigateTo("/Bestellbestätigung");
	}

	// allergien, bestellungsposition, kunde, menuitem, menuitemkategorie, menuitemueberkategorie, rabatt
	private List<Allergie> allergien = new List<Allergie>();
	private List<Bestellungsposition> bestellungspositions = new List<Bestellungsposition>();
	private List<Menuitem> menuitems = new List<Menuitem>();
	private List<Menuitemkategorie> menuitemkategories = new List<Menuitemkategorie>();
	private List<Menuitemueberkategorie> menuitemueberkategories = new List<Menuitemueberkategorie>();
	private List<BestellungspositionHasMenuitem> bestellungspositionHasMenuitems = new List<BestellungspositionHasMenuitem>();

	protected override async Task OnInitializedAsync()
	{
		// get data from api
		allergien = await Http.GetFromJsonAsync<List<Allergie>>("https://localhost:7076/api/allergien");
		bestellungspositions = await Http.GetFromJsonAsync<List<Bestellungsposition>>("https://localhost:7076/api/bestellungspositionen");
		kunden = await Http.GetFromJsonAsync<List<Kunde>>("https://localhost:7076/api/kunden");
		menuitems = await Http.GetFromJsonAsync<List<Menuitem>>("https://localhost:7076/api/Menuitems");
		menuitemkategories = await Http.GetFromJsonAsync<List<Menuitemkategorie>>("https://localhost:7076/api/Menuitemkategories");
		menuitemueberkategories = await Http.GetFromJsonAsync<List<Menuitemueberkategorie>>("https://localhost:7076/api/Menuitemueberkategories");
		rabatte = await Http.GetFromJsonAsync<List<Rabatt>>("https://localhost:7076/api/Rabatte");
		bestellungspositionHasMenuitems = await Http.GetFromJsonAsync<List<BestellungspositionHasMenuitem>>("https://localhost:7076/api/BestellungspositionHasMenuitems");

		// test use the first kunde
		kunde = kunden[0];

		// get the most recent rabatt, that are still valid (GueltigkeitBis)
		// if there is no rabatt, set the rabatt to null
		if (rabatte.Count == 0)
		{
			rabatt = null;
		}
		else
		{
			for (int i = 0; i < rabatte.Count; i++)
			{
				if (rabatte[i].GueltigkeitBis > DateTime.Now)
				{
					rabatt = rabatte[i];
				}
			}
		}

		// get data from localstorage
		if (localStorage.GetItem<Dictionary<int, int>>("MenuItemIds") != null)
		{
			menuitemIds = localStorage.GetItem<Dictionary<int, int>>("MenuItemIds");
		}

		// calculate the sum of all menuitems
		summe = 0;
		foreach (var item in menuitemIds)
		{
			foreach (var item2 in menuitems)
			{
				if (item.Key == item2.IdmenuItem)
				{
					summe += item2.Preis * item.Value;
				}
			}
		}

		// if hour/minute is set, set the values
		if (localStorage.GetItem<int>("Hour") != 0)
		{
			hour = localStorage.GetItem<int>("Hour");
		}
		if (localStorage.GetItem<int>("Minute") != 0)
		{
			minute = localStorage.GetItem<int>("Minute");
		}
	}

	public class Allergie
	{
		public int Idallergie { get; set; }

		public string? Beschreibung { get; set; }

		public virtual ICollection<Menuitem> MenuItemIdmenuItems { get; set; } = new List<Menuitem>();
	}
	public class Bestellungsposition
	{
		public int Idbestellung { get; set; }

		public int? Menge { get; set; }

		public DateTime? Datum { get; set; }

		public int KundeIdkunde { get; set; }

		public int RabattIdrabatt { get; set; }


	}
	public class Kunde
	{
		public int Idkunde { get; set; }

		public string? Code { get; set; }

		public int? Treuepunkte { get; set; }

		public virtual ICollection<Bestellungsposition> Bestellungspositions { get; set; } = new List<Bestellungsposition>();
	}

	public class Menuitem
	{
		public int IdmenuItem { get; set; }

		public string? Bezeichnung { get; set; }

		public string? Zusatzinformation { get; set; }

		public decimal Preis { get; set; }

		public int MenuItemKategorieIdmenuItemKategorie { get; set; }

		public virtual Menuitemkategorie MenuItemKategorieIdmenuItemKategorieNavigation { get; set; } = null!;

		public virtual ICollection<Allergie> AllergieIdallergies { get; set; } = new List<Allergie>();

		public virtual ICollection<Bestellungsposition> BestellungspositionIdbestellungs { get; set; } = new List<Bestellungsposition>();
	}
	public class Menuitemkategorie
	{
		public int IdmenuItemKategorie { get; set; }

		public string? Bezeichnung { get; set; }

		public int MenuItemUeberkategorieIdmenuItemUeberkategorie { get; set; }

		public virtual Menuitemueberkategorie MenuItemUeberkategorieIdmenuItemUeberkategorieNavigation { get; set; } = null!;

		public virtual ICollection<Menuitem> Menuitems { get; set; } = new List<Menuitem>();
	}

	public class Menuitemueberkategorie
	{
		public int IdmenuItemUeberkategorie { get; set; }

		public string? Bezeichnung { get; set; }

		public virtual ICollection<Menuitemkategorie> Menuitemkategories { get; set; } = new List<Menuitemkategorie>();
	}

	public class Rabatt
	{
		public int Idrabatt { get; set; }

		public decimal Prozent { get; set; }

		public DateTime? GueltigkeitVon { get; set; }

		public DateTime? GueltigkeitBis { get; set; }

		public bool Einloesen { get; set; }
		public virtual ICollection<Bestellungsposition> Bestellungspositions { get; set; } = new List<Bestellungsposition>();
	}


	public class BestellungspositionHasMenuitem
	{
		public int? Bestellungsposition_IDBestellung { get; set; }
		public int? MenuItem_IDMenuItem { get; set; }
	}
}